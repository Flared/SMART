import csv
from django.conf import settings

from core.management.commands.seed import (
    SEED_PROJECT, SEED_USERNAME, SEED_EMAIL,
    SEED_PASSWORD, SEED_FILE_PATH, SEED_LABELS)
from core.pagination import SmartPagination

# Need a hashable dict so we can put them in a set
class HashableDict(dict):
    def __hash__(self):
        return hash(frozenset(self))

def subset_keys(dict_, keys):
    '''
    Return a new HashableDict with the given subset of keys extracted from
    the given dict.
    '''
    return HashableDict([(k, dict_[k]) for k in dict_ if k in keys])

def assert_collections_equal(expected, actual):
    '''
    Determine whether two collections contain the same objects.
    '''
    for obj in expected:
        assert obj in actual

    for obj in actual:
        assert obj in expected

def compare_api_response(response, expected, significant_keys):
    '''
    Compare a django.http.HttpResponse generated by a client.get(<url>)
    to a list of expected API results.  Only fields listed in "significant_keys"
    will be considered in equality comparisons.
    '''
    assert response.status_code == 200

    response_json = response.json()

    significant_keys = set(significant_keys)

    significant_expected = set(subset_keys(d, significant_keys)
                               for d in expected)
    significant_response = set(subset_keys(d, significant_keys)
                               for d in response_json['results'])

    assert_collections_equal(significant_expected, significant_response)


def test_get_projects(admin_client):
    response = admin_client.get('/api/projects/')
    compare_api_response(response, [{ 'name': SEED_PROJECT }], ['name'])

def test_get_users(admin_client):
    response = admin_client.get('/api/users/')
    compare_api_response(response, [{}], [])

def test_get_auth_users(admin_client):
    response = admin_client.get('/api/auth_users/')
    compare_api_response(response, [
        { 'username': SEED_USERNAME, 'email': SEED_EMAIL },
        # Special user created for the admin_client to run tests
        { 'username': 'admin', 'email': 'admin@example.com' }
    ], ['username', 'email'])

def test_login(client, db):
    assert client.login(username=SEED_USERNAME, password=SEED_PASSWORD)

def test_get_labels(admin_client):
    response = admin_client.get('/api/labels/')
    compare_api_response(response, [
        { 'name': label } for label in SEED_LABELS
    ], ['name'])

def test_get_data(admin_client):
    with open(SEED_FILE_PATH) as f:
        expected = [{'text': d['Tweet']} for d in csv.DictReader(f)]

    assert SmartPagination.max_page_size >= len(expected), \
            "SmartPagination's max_page_size setting must be larger than the " \
            "size of the sample dataset for this test to run properly."

    response = admin_client.get('/api/data/?page_size={}'.format(len(expected)))
    compare_api_response(response, expected, ['text'])
